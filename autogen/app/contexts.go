// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "feedpushr": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/ncarlier/feedpushr/design
// --out=$(GOPATH)/src/github.com/ncarlier/feedpushr/autogen
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// CreateFeedContext provides the feed create action context.
type CreateFeedContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	URL string
}

// NewCreateFeedContext parses the incoming request URL and body, performs validations and creates the
// context used by the feed controller create action.
func NewCreateFeedContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateFeedContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateFeedContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramURL := req.Params["url"]
	if len(paramURL) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("url"))
	} else {
		rawURL := paramURL[0]
		rctx.URL = rawURL
		if err2 := goa.ValidateFormat(goa.FormatURI, rctx.URL); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`url`, rctx.URL, goa.FormatURI, err2))
		}
	}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateFeedContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateFeedContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteFeedContext provides the feed delete action context.
type DeleteFeedContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewDeleteFeedContext parses the incoming request URL and body, performs validations and creates the
// context used by the feed controller delete action.
func NewDeleteFeedContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteFeedContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteFeedContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteFeedContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteFeedContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteFeedContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// GetFeedContext provides the feed get action context.
type GetFeedContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewGetFeedContext parses the incoming request URL and body, performs validations and creates the
// context used by the feed controller get action.
func NewGetFeedContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetFeedContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetFeedContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetFeedContext) OK(r *Feed) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *GetFeedContext) OKLink(r *FeedLink) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *GetFeedContext) OKTiny(r *FeedTiny) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetFeedContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetFeedContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListFeedContext provides the feed list action context.
type ListFeedContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Limit int
	Page  int
}

// NewListFeedContext parses the incoming request URL and body, performs validations and creates the
// context used by the feed controller list action.
func NewListFeedContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListFeedContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListFeedContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLimit := req.Params["limit"]
	if len(paramLimit) == 0 {
		rctx.Limit = 10
	} else {
		rawLimit := paramLimit[0]
		if limit, err2 := strconv.Atoi(rawLimit); err2 == nil {
			rctx.Limit = limit
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("limit", rawLimit, "integer"))
		}
		if rctx.Limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`limit`, rctx.Limit, 1, true))
		}
		if rctx.Limit > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`limit`, rctx.Limit, 100, false))
		}
	}
	paramPage := req.Params["page"]
	if len(paramPage) == 0 {
		rctx.Page = 1
	} else {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			rctx.Page = page
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
		if rctx.Page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`page`, rctx.Page, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListFeedContext) OK(r FeedCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.feedpushr.feed.v1+json; type=collection")
	}
	if r == nil {
		r = FeedCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ListFeedContext) OKTiny(r FeedTinyCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.feedpushr.feed.v1+json; type=collection")
	}
	if r == nil {
		r = FeedTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListFeedContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListFeedContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// StartFeedContext provides the feed start action context.
type StartFeedContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewStartFeedContext parses the incoming request URL and body, performs validations and creates the
// context used by the feed controller start action.
func NewStartFeedContext(ctx context.Context, r *http.Request, service *goa.Service) (*StartFeedContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := StartFeedContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// Accepted sends a HTTP response with status code 202.
func (ctx *StartFeedContext) Accepted() error {
	ctx.ResponseData.WriteHeader(202)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *StartFeedContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *StartFeedContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// StopFeedContext provides the feed stop action context.
type StopFeedContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewStopFeedContext parses the incoming request URL and body, performs validations and creates the
// context used by the feed controller stop action.
func NewStopFeedContext(ctx context.Context, r *http.Request, service *goa.Service) (*StopFeedContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := StopFeedContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// Accepted sends a HTTP response with status code 202.
func (ctx *StopFeedContext) Accepted() error {
	ctx.ResponseData.WriteHeader(202)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *StopFeedContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *StopFeedContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListFilterContext provides the filter list action context.
type ListFilterContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListFilterContext parses the incoming request URL and body, performs validations and creates the
// context used by the filter controller list action.
func NewListFilterContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListFilterContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListFilterContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListFilterContext) OK(r FilterCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.feedpushr.filter.v1+json; type=collection")
	}
	if r == nil {
		r = FilterCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// GetHealthContext provides the health get action context.
type GetHealthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGetHealthContext parses the incoming request URL and body, performs validations and creates the
// context used by the health controller get action.
func NewGetHealthContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetHealthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetHealthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetHealthContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// GetOpmlContext provides the opml get action context.
type GetOpmlContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGetOpmlContext parses the incoming request URL and body, performs validations and creates the
// context used by the opml controller get action.
func NewGetOpmlContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetOpmlContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetOpmlContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetOpmlContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/xml")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetOpmlContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// UploadOpmlContext provides the opml upload action context.
type UploadOpmlContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewUploadOpmlContext parses the incoming request URL and body, performs validations and creates the
// context used by the opml controller upload action.
func NewUploadOpmlContext(ctx context.Context, r *http.Request, service *goa.Service) (*UploadOpmlContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UploadOpmlContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *UploadOpmlContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UploadOpmlContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// GetOutputContext provides the output get action context.
type GetOutputContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGetOutputContext parses the incoming request URL and body, performs validations and creates the
// context used by the output controller get action.
func NewGetOutputContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetOutputContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetOutputContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetOutputContext) OK(r *Output) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// PubPshbContext provides the pshb pub action context.
type PubPshbContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewPubPshbContext parses the incoming request URL and body, performs validations and creates the
// context used by the pshb controller pub action.
func NewPubPshbContext(ctx context.Context, r *http.Request, service *goa.Service) (*PubPshbContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PubPshbContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *PubPshbContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *PubPshbContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// SubPshbContext provides the pshb sub action context.
type SubPshbContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	HubChallenge    string
	HubLeaseSeconds *int
	HubMode         string
	HubTopic        string
}

// NewSubPshbContext parses the incoming request URL and body, performs validations and creates the
// context used by the pshb controller sub action.
func NewSubPshbContext(ctx context.Context, r *http.Request, service *goa.Service) (*SubPshbContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SubPshbContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramHubChallenge := req.Params["hub.challenge"]
	if len(paramHubChallenge) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("hub.challenge"))
	} else {
		rawHubChallenge := paramHubChallenge[0]
		rctx.HubChallenge = rawHubChallenge
	}
	paramHubLeaseSeconds := req.Params["hub.lease_seconds"]
	if len(paramHubLeaseSeconds) > 0 {
		rawHubLeaseSeconds := paramHubLeaseSeconds[0]
		if hubLeaseSeconds, err2 := strconv.Atoi(rawHubLeaseSeconds); err2 == nil {
			tmp4 := hubLeaseSeconds
			tmp3 := &tmp4
			rctx.HubLeaseSeconds = tmp3
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("hub.lease_seconds", rawHubLeaseSeconds, "integer"))
		}
	}
	paramHubMode := req.Params["hub.mode"]
	if len(paramHubMode) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("hub.mode"))
	} else {
		rawHubMode := paramHubMode[0]
		rctx.HubMode = rawHubMode
		if !(rctx.HubMode == "subscribe" || rctx.HubMode == "unsubscribe") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`hub.mode`, rctx.HubMode, []interface{}{"subscribe", "unsubscribe"}))
		}
	}
	paramHubTopic := req.Params["hub.topic"]
	if len(paramHubTopic) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("hub.topic"))
	} else {
		rawHubTopic := paramHubTopic[0]
		rctx.HubTopic = rawHubTopic
		if err2 := goa.ValidateFormat(goa.FormatURI, rctx.HubTopic); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`hub.topic`, rctx.HubTopic, goa.FormatURI, err2))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SubPshbContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SubPshbContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// GetSwaggerContext provides the swagger get action context.
type GetSwaggerContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGetSwaggerContext parses the incoming request URL and body, performs validations and creates the
// context used by the swagger controller get action.
func NewGetSwaggerContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetSwaggerContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetSwaggerContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetSwaggerContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// GetVarsContext provides the vars get action context.
type GetVarsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGetVarsContext parses the incoming request URL and body, performs validations and creates the
// context used by the vars controller get action.
func NewGetVarsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetVarsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetVarsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetVarsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}
