// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "feedpushr": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/ncarlier/feedpushr/design
// --out=$(GOPATH)/src/github.com/ncarlier/feedpushr/autogen
// --version=v1.3.1

package app

import (
	"github.com/goadesign/goa"
	"time"
)

// A RSS feed (default view)
//
// Identifier: application/vnd.feedpushr.feed.v1+json; view=default
type Feed struct {
	// Date of creation
	Cdate time.Time `form:"cdate" json:"cdate" xml:"cdate"`
	// Number of consecutive aggregation errors
	ErrorCount *int `form:"errorCount,omitempty" json:"errorCount,omitempty" xml:"errorCount,omitempty"`
	// Last aggregation error
	ErrorMsg *string `form:"errorMsg,omitempty" json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// URL of the feed website
	HTMLURL *string `form:"htmlUrl,omitempty" json:"htmlUrl,omitempty" xml:"htmlUrl,omitempty"`
	// URL of the PubSubHubbud hub
	HubURL *string `form:"hubUrl,omitempty" json:"hubUrl,omitempty" xml:"hubUrl,omitempty"`
	// ID of feed (MD5 of the xmlUrl)
	ID string `form:"id" json:"id" xml:"id"`
	// Last aggregation pass
	LastCheck *time.Time `form:"lastCheck,omitempty" json:"lastCheck,omitempty" xml:"lastCheck,omitempty"`
	// Date of modification
	Mdate time.Time `form:"mdate" json:"mdate" xml:"mdate"`
	// Total number of processed items
	NbProcessedItems *int `form:"nbProcessedItems,omitempty" json:"nbProcessedItems,omitempty" xml:"nbProcessedItems,omitempty"`
	// Next aggregation pass
	NextCheck *time.Time `form:"nextCheck,omitempty" json:"nextCheck,omitempty" xml:"nextCheck,omitempty"`
	// Aggregation status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// List of tags
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// Text attribute of the Feed
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	// Title of the Feed
	Title string `form:"title" json:"title" xml:"title"`
	// URL of the XML feed
	XMLURL string `form:"xmlUrl" json:"xmlUrl" xml:"xmlUrl"`
}

// Validate validates the Feed media type instance.
func (mt *Feed) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.XMLURL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "xmlUrl"))
	}
	if mt.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title"))
	}

	if mt.Status != nil {
		if !(*mt.Status == "running" || *mt.Status == "stopped") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.status`, *mt.Status, []interface{}{"running", "stopped"}))
		}
	}
	return
}

// A RSS feed (link view)
//
// Identifier: application/vnd.feedpushr.feed.v1+json; view=link
type FeedLink struct {
	// ID of feed (MD5 of the xmlUrl)
	ID string `form:"id" json:"id" xml:"id"`
	// URL of the XML feed
	XMLURL string `form:"xmlUrl" json:"xmlUrl" xml:"xmlUrl"`
}

// Validate validates the FeedLink media type instance.
func (mt *FeedLink) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.XMLURL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "xmlUrl"))
	}
	return
}

// A RSS feed (tiny view)
//
// Identifier: application/vnd.feedpushr.feed.v1+json; view=tiny
type FeedTiny struct {
	// Date of creation
	Cdate time.Time `form:"cdate" json:"cdate" xml:"cdate"`
	// ID of feed (MD5 of the xmlUrl)
	ID string `form:"id" json:"id" xml:"id"`
	// List of tags
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// Title of the Feed
	Title string `form:"title" json:"title" xml:"title"`
	// URL of the XML feed
	XMLURL string `form:"xmlUrl" json:"xmlUrl" xml:"xmlUrl"`
}

// Validate validates the FeedTiny media type instance.
func (mt *FeedTiny) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.XMLURL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "xmlUrl"))
	}
	if mt.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title"))
	}

	return
}

// FeedCollection is the media type for an array of Feed (default view)
//
// Identifier: application/vnd.feedpushr.feed.v1+json; type=collection; view=default
type FeedCollection []*Feed

// Validate validates the FeedCollection media type instance.
func (mt FeedCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// FeedCollection is the media type for an array of Feed (tiny view)
//
// Identifier: application/vnd.feedpushr.feed.v1+json; type=collection; view=tiny
type FeedTinyCollection []*FeedTiny

// Validate validates the FeedTinyCollection media type instance.
func (mt FeedTinyCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// A filter (default view)
//
// Identifier: application/vnd.feedpushr.filter.v1+json; view=default
type Filter struct {
	// Description of the filter
	Desc string `form:"desc" json:"desc" xml:"desc"`
	// Name of the filter
	Name string `form:"name" json:"name" xml:"name"`
	// Filter properties
	Props map[string]interface{} `form:"props,omitempty" json:"props,omitempty" xml:"props,omitempty"`
	// List of tags
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// Validate validates the Filter media type instance.
func (mt *Filter) Validate() (err error) {
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Desc == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "desc"))
	}
	return
}

// FilterCollection is the media type for an array of Filter (default view)
//
// Identifier: application/vnd.feedpushr.filter.v1+json; type=collection; view=default
type FilterCollection []*Filter

// Validate validates the FilterCollection media type instance.
func (mt FilterCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// The output channel (default view)
//
// Identifier: application/vnd.feedpushr.output.v1+json; view=default
type Output struct {
	// Description of the output channel
	Desc string `form:"desc" json:"desc" xml:"desc"`
	// Name of the output channel
	Name string `form:"name" json:"name" xml:"name"`
	// Output channel properties
	Props map[string]interface{} `form:"props,omitempty" json:"props,omitempty" xml:"props,omitempty"`
}

// Validate validates the Output media type instance.
func (mt *Output) Validate() (err error) {
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Desc == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "desc"))
	}
	return
}
